// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "search.rpcz.h"
#include "search.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/stubs/once.h>
#include <rpcz/rpcz.hpp>
namespace {
const ::google::protobuf::ServiceDescriptor* SearchService_descriptor_ = NULL;
}  // anonymouse namespace

void rpcz_protobuf_AssignDesc_search_2eproto() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "search.proto");
  GOOGLE_CHECK(file != NULL);
  SearchService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &rpcz_protobuf_AssignDesc_search_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void rpcz_protobuf_ShutdownFile_search_2eproto() {
}

void rpcz_protobuf_AddDesc_search_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014search.proto\"6\n\rSearchRequest\022\r\n\005query"
    "\030\001 \002(\t\022\026\n\013page_number\030\002 \001(\005:\0011\"!\n\016Search"
    "Response\022\017\n\007results\030\001 \003(\t2:\n\rSearchServi"
    "ce\022)\n\006Search\022\016.SearchRequest\032\017.SearchRes"
    "ponse", 165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&rpcz_protobuf_ShutdownFile_search_2eproto);
}

// ===================================================================

SearchService::~SearchService() {}

const ::google::protobuf::ServiceDescriptor* SearchService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SearchService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchService_descriptor_;
}

void SearchService::Search(const ::SearchRequest&,
                         ::rpcz::reply< ::SearchResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method Search() not implemented.");
}

void SearchService::call_method(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::Message& request,
                             ::rpcz::server_channel* channel) {
  GOOGLE_DCHECK_EQ(method->service(), SearchService_descriptor_);
  switch(method->index()) {
    case 0:
      Search(
          *::google::protobuf::down_cast<const ::SearchRequest*>(&request),
          ::rpcz::reply< ::SearchResponse>(channel));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SearchService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SearchRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SearchService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::SearchResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SearchService_Stub::SearchService_Stub(::rpcz::rpc_channel* channel,
                                   const ::std::string& service_name,
                                   bool owns_channel)
  : channel_(channel), service_name_(service_name),
    owns_channel_(owns_channel) {}
SearchService_Stub::SearchService_Stub(::rpcz::rpc_channel* channel,
                                   bool owns_channel)
  : channel_(channel), service_name_(SearchService::descriptor()->name()),
    owns_channel_(owns_channel) {}
SearchService_Stub::~SearchService_Stub() {
  if (owns_channel_) delete channel_;
}

void SearchService_Stub::Search(const ::SearchRequest& request,
                              ::SearchResponse* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        SearchService::descriptor()->method(0),
                        request, response, rpc, done);
}
void SearchService_Stub::Search(const ::SearchRequest& request,
                              ::SearchResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        SearchService::descriptor()->method(0),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
